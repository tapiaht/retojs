/*/reto64
En este desaf√≠o, tendr√°s que implementar un sistema de pagos utilizando polimorfismo en JavaScript.
1.Se debe crear una clase base llamada Pay que contenga un √∫nico m√©todo llamado makePay. Este m√©todo recibir√° la cantidad a pagar y devolver√° un objeto con dos propiedades
realized: true
quantity: $cantidadAPagar
2 Adem√°s, se deben crear tambi√©n las clases PayPal, Card y Cash, donde cada una debe heredar de la clase Pay.
3. La clase PayPal debe recibir un email en el constructor y el m√©todo makePay debe agregar las propiedades:
platform: "PayPal"
email: $EmailRecibido.
La clase Card recibir√° un n√∫mero de tarjeta de 16 d√≠gitos. Al momento de acceder al m√©todo makePay, se validar√° si la tarjeta en cuesti√≥n tiene esa longitud. En caso de no tener los 16 d√≠gitos, se debe retornar un error. En caso contrario, al m√©todo que proviene de Pay, se le agregar√° la propiedad de lastCardNumber: donde se devolver√°n los √∫ltimos 4 d√≠gitos de la tarjeta.
La clase Cash simplemente nos devolver√° lo mismo que la clase base.
4. Por √∫ltimo se debe implementar la l√≥gica de la funci√≥n processPay la cual recibir√° un m√©todo de pago y la cantidad, para poder devolver el objeto llamando al m√©todo makePay de cada entidad recibida.

Cada clase tiene su propio archivo dentro del sistema de archvios del playground

export class Pay {
	constructor(realized,quantity){
		this.realized=realized
		this.quantity=quantity
	}
  makePay($cantidadAPagar){
	  this.realized=true
	  this.quantity=$cantidadAPagar
	  return this
  }
}
const pago = new Pay()
pago.makePay(32)

import { Pay } from "./Pay.class.js";

export class PayPal extends Pay {
  constructor(email){
    super()
    this.email=email
  }
  makePay(quantity){
    return {
      ...super.makePay(quantity),
      platform:"PayPal",
      email:this.email
    }
  }
}
*/
import { Pay } from "./Pay.class.js";

export class Card extends Pay {
  // Tu c√≥digo aqu√≠ üëà
  constructor(CardNumbers){
    super()
    this.CardNumbers=CardNumbers
  }
  makePay(quantity){
    if (this.CardNumbers.length!==16)
      throwError('No tiene 16 d√≠gitos')
    return {...super.makePay(quantity),lastCardNumber:this.CardNumbers.slice(-4)}
  }
}


export function processPay(method, quantity) {
  return method.makePay(quantity)
}
const card = new Card("4913478952471122")
processPay(card, 100)
//export function processPay(method, quantity) {
  // Tu c√≥digo aqu√≠ üëà
//}

/*
{
  realized: true,
  quantity: 100,
  lastCardNumbers: "1122",
}
*/
//const paypal = new PayPal("test@mail.com")
//processPay(paypal, 240)
/*
{
  realized: true,
  quantity: 240,
  platform: "PayPal",
  email: "test@mail.com",
}
*/
//const cash = new Cash()
//processPay(cash, 400)
/*
{
  realized: true,
  quantity: 400,
}
*/